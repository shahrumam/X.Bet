@page "/insert-user-in-league/{LeagueId:int}"

@using DanaBet.DBModel
@using DanaBet.DBData
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations

@inject ApplicationDbContext DbContext

<div class="row">
    <div class="col-lg-6 col-xs-12">
        <h3>افزودن کاربر به لیگ (لیگ شماره: @LeagueId)</h3>

        <EditForm Model="@newUser"
                  OnValidSubmit="@HandleValidSubmit"
                  FormName="InsertUserForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="card">
                <div class="card-body">

                    <div class="mb-3">
                        <label class="form-label">نام:</label>
                        <InputText class="form-control" @bind-Value="newUser.Firstname" />
                        <ValidationMessage For="@(() => newUser.Firstname)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">نام خانوادگی:</label>
                        <InputText class="form-control" @bind-Value="newUser.Lastname" />
                        <ValidationMessage For="@(() => newUser.Lastname)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">موبایل:</label>
                        <InputText class="form-control" @bind-Value="newUser.Mobile" />
                        <ValidationMessage For="@(() => newUser.Mobile)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">شناسه لیگ:</label>
                        <InputNumber class="form-control" @bind-Value="newUser.LeagueId" readonly />
                    </div>

                    <button type="submit" class="btn btn-primary">ثبت کاربر</button>

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3">@successMessage</div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">@errorMessage</div>
                    }

                    @if (!string.IsNullOrEmpty(debugMessage))
                    {
                        <div class="alert alert-info mt-3"><strong>DEBUG:</strong> @debugMessage</div>
                    }

                </div>
            </div>
        </EditForm>
    </div>

    <div class="col-md-6 col-xs-12">
        <div class="table-responsive">
            <table class="table table-striped table-hover table-border">
                <thead>
                    <tr>
                        <th>شرکت‌کنندگان (لیگ @LeagueId)</th>
                    </tr>
                </thead>
                <tbody>
                    @if (userLeagueList == null)
                    {
                        <tr><td>در حال بارگذاری...</td></tr>
                    }
                    else if (!userLeagueList.Any())
                    {
                        <tr><td>هنوز کاربری در این لیگ ثبت نشده است.</td></tr>
                    }
                    else
                    {
                        @foreach (var user in userLeagueList)
                        {
                            <tr>
                                <td>@user.Firstname @user.Lastname</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int LeagueId { get; set; }

    private List<LeagueUser> userLeagueList = new();
    private LeagueUser newUser = new LeagueUser(); // همیشه مقداردهی اولیه
    private string successMessage;
    private string errorMessage;
    private string debugMessage; // برای نشان دادن مقادیر هنگام submit

    // وقتی پارامترها (مثل LeagueId) ست شدند این متد صدا می‌شود.
    protected override async Task OnParametersSetAsync()
    {
        // مقداردهی مدل ورودی (اطمینان از اینکه LeagueId ست شده در مدل)
        InitializeNewUser();

        try
        {
            userLeagueList = await DbContext.TBL_LeagueUsers
                .Where(u => u.LeagueId == LeagueId)
                .AsNoTracking()
                .ToListAsync();
        }
        catch (Exception ex)
        {
            // خطای بارگذاری لیست را نشان بده
            errorMessage = $"خطا در بارگذاری شرکت‌کنندگان: {ex.Message}";
            userLeagueList = new List<LeagueUser>();
        }
    }

    private async Task HandleValidSubmit()
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;
        debugMessage = string.Empty;

        // لاگ مقادیر فعلی (برای دیباگ)
        debugMessage = $"Before save: Firstname='{newUser.Firstname}', Lastname='{newUser.Lastname}', Mobile='{newUser.Mobile}', LeagueId={newUser.LeagueId}";

        try
        {
            // یک کپی از مدل می‌سازیم تا اگر فرم ریست شد مقادیر حفظ شوند
            var userToSave = new LeagueUser
                {
                    Firstname = newUser.Firstname?.Trim() ?? string.Empty,
                    Lastname = newUser.Lastname?.Trim() ?? string.Empty,
                    Mobile = newUser.Mobile?.Trim() ?? string.Empty,
                    LeagueId = newUser.LeagueId
                };

            DbContext.TBL_LeagueUsers.Add(userToSave);
            await DbContext.SaveChangesAsync();

            successMessage = $"کاربر {userToSave.Firstname} {userToSave.Lastname} ثبت شد.";

            // افزودن به لیست محلی و ری‌نشانی فرم
            userLeagueList.Add(userToSave);

            // پاک کردن مدل فرم (حفظ LeagueId)
            InitializeNewUser();
        }
        catch (Exception ex)
        {
            errorMessage = $"خطا در ذخیره: {ex.Message}";
        }
    }

    private void InitializeNewUser()
    {
        // از LeagueId استفاده می‌کنیم — چون این متد در OnParametersSetAsync یا بعد از آن صدا می‌شود،
        // LeagueId باید مقدار مناسبی داشته باشد.
        newUser = new LeagueUser
            {
                LeagueId = this.LeagueId,
                Firstname = string.Empty,
                Lastname = string.Empty,
                Mobile = string.Empty
            };
    }
}
